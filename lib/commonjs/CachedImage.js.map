{"version":3,"sources":["CachedImage.tsx"],"names":["AnimatedImage","Animated","createAnimatedComponent","RNImage","AnimatedView","View","defaultProps","onError","CachedImage","props","error","setError","React","useState","uri","setUri","undefined","source","propsSource","currentSource","setCurrentSource","animatedImage","useRef","Value","current","animatedThumbnailImage","animatedLoadingImage","load","catch","resetAnimations","cacheKey","options","path","CacheManager","get","getPath","nativeEvent","Error","e","setValue","onThumbnailLoad","timing","toValue","useNativeDriver","start","duration","thumbnailAnimationDuration","config","onImageError","onImageLoad","sourceAnimationDuration","blurRadius","loadingImageComponent","LoadingImageComponent","loadingImageStyle","style","loadingSource","resizeMode","thumbnailSource","rest","isImageReady","imageSource","Platform","OS","styles","container","opacity","imageStyle","StyleSheet","create","backgroundColor","bottom","left","position","right","top","alignItems","alignSelf","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport {\n  Animated,\n  Image as RNImage,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport CacheManager from './CacheManager';\nimport { ImageProps, IProps } from './types';\n\nconst AnimatedImage = Animated.createAnimatedComponent(RNImage);\nconst AnimatedView = Animated.View;\n\nconst defaultProps = {\n  onError: () => {},\n};\n\nconst CachedImage = (props: IProps & typeof defaultProps) => {\n  const [error, setError] = React.useState<boolean>(false);\n  const [uri, setUri] = React.useState<string | undefined>(undefined);\n  const { source: propsSource } = props;\n  const [currentSource, setCurrentSource] = React.useState<string>(propsSource);\n\n  const animatedImage = React.useRef(new Animated.Value(0)).current;\n\n  const animatedThumbnailImage = React.useRef(new Animated.Value(0)).current;\n\n  const animatedLoadingImage = React.useRef(new Animated.Value(1)).current;\n\n  useEffect(() => {\n    if (propsSource !== uri) {\n      load(props).catch();\n    }\n    if (propsSource !== currentSource) {\n      setCurrentSource(propsSource);\n      setUri(undefined);\n      resetAnimations();\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [propsSource, uri]);\n\n  const load = async ({\n    cacheKey,\n    onError,\n    options = {},\n    source,\n  }: ImageProps): Promise<void> => {\n    if (source) {\n      try {\n        const path = await CacheManager.get(\n          source,\n          options,\n          cacheKey || source\n        ).getPath();\n        if (path) {\n          setUri(path);\n          setError(false);\n        } else {\n          setError(true);\n          onError({\n            nativeEvent: { error: new Error('Could not load image') },\n          });\n        }\n      } catch (e) {\n        setError(true);\n        onError({ nativeEvent: { error: e } });\n      }\n    }\n  };\n\n  const resetAnimations = () => {\n    animatedLoadingImage.setValue(1);\n    animatedThumbnailImage.setValue(0);\n    animatedImage.setValue(0);\n  };\n\n  const onThumbnailLoad = () => {\n    Animated.timing(animatedLoadingImage, {\n      toValue: 0,\n      useNativeDriver: true,\n    }).start(() => {\n      Animated.timing(animatedThumbnailImage, {\n        toValue: 1,\n        duration:\n          props.thumbnailAnimationDuration ||\n          CacheManager.config.thumbnailAnimationDuration,\n        useNativeDriver: true,\n      }).start();\n    });\n  };\n\n  const onImageError = (): void => setError(true);\n\n  const onImageLoad = (): void => {\n    Animated.timing(animatedImage, {\n      toValue: 1,\n      duration:\n        props.sourceAnimationDuration ||\n        CacheManager.config.sourceAnimationDuration,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const {\n    blurRadius,\n    loadingImageComponent: LoadingImageComponent,\n    loadingImageStyle = props.style,\n    loadingSource,\n    resizeMode,\n    style,\n    thumbnailSource,\n    ...rest\n  } = props;\n\n  const isImageReady = useMemo(() => (uri ? true : false), [uri, propsSource]);\n  const imageSource = useMemo(() => {\n    return error || !uri\n      ? loadingSource\n      : {\n          uri: Platform.OS === 'android' ? `file://${uri}` : uri,\n        };\n  }, [uri, error]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {!isImageReady &&\n        (LoadingImageComponent ? (\n          <AnimatedView\n            style={[\n              styles.loadingImageStyle,\n              { opacity: animatedLoadingImage },\n            ]}\n          >\n            <LoadingImageComponent />\n          </AnimatedView>\n        ) : (\n          <View style={[styles.loadingImageStyle]}>\n            <AnimatedImage\n              resizeMode={resizeMode || 'contain'}\n              style={[{ opacity: animatedLoadingImage }, loadingImageStyle]}\n              // @ts-ignore\n              source={loadingSource}\n            />\n          </View>\n        ))}\n      {thumbnailSource && (\n        <AnimatedImage\n          blurRadius={blurRadius || CacheManager.config.blurRadius}\n          onLoad={onThumbnailLoad}\n          resizeMode={resizeMode || 'contain'}\n          source={{ uri: thumbnailSource }}\n          style={[{ opacity: animatedThumbnailImage }]}\n        />\n      )}\n      {imageSource && (\n        <AnimatedImage\n          {...rest}\n          onError={onImageError}\n          onLoad={onImageLoad}\n          resizeMode={resizeMode || 'contain'}\n          // @ts-ignore\n          source={imageSource}\n          // @ts-ignore\n          style={[styles.imageStyle, { opacity: animatedImage }]}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  imageStyle: {\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  loadingImageStyle: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n});\n\nCachedImage.defaultProps = defaultProps;\n\nexport default CachedImage;\n"]}