{"version":3,"sources":["CacheManager.ts"],"names":["SHA1","uniqueId","FileSystem","defaultConfiguration","CacheEntry","constructor","source","options","cacheKey","getPath","path","exists","tmpPath","getCacheEntry","downloadPromise","pathResolved","download","result","fetch","status","undefined","mv","CacheManager","config","defaultConfig","newConfig","get","entries","clearCache","files","ls","baseDir","file","unlink","e","console","log","removeCacheEntry","entry","Error","getCacheSize","stat","size","filename","substring","lastIndexOf","indexOf","length","ext","sha","mkdir"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport SHA1 from 'crypto-js/sha1';\nimport uniqueId from 'lodash/uniqueId';\nimport { FileSystem } from 'react-native-file-access';\n\nimport { Config, DownloadOptions } from './types';\nimport defaultConfiguration from './defaultConfiguration';\n\nexport class CacheEntry {\n  source: string;\n\n  options: DownloadOptions;\n\n  cacheKey: string;\n\n  downloadPromise: Promise<string | undefined> | undefined;\n\n  pathResolved = false;\n\n  constructor(source: string, options: DownloadOptions, cacheKey: string) {\n    this.source = source;\n    this.options = options;\n    this.cacheKey = cacheKey;\n  }\n\n  async getPath(): Promise<string | undefined> {\n    const { cacheKey } = this;\n    const { path, exists, tmpPath } = await getCacheEntry(cacheKey);\n    if (exists) {\n      return path;\n    }\n\n    if (!this.downloadPromise) {\n      this.pathResolved = false;\n      this.downloadPromise = this.download(path, tmpPath);\n    }\n\n    if (this.downloadPromise && this.pathResolved) {\n      this.pathResolved = false;\n      this.downloadPromise = this.download(path, tmpPath);\n    }\n    return this.downloadPromise;\n  }\n\n  private async download(\n    path: string,\n    tmpPath: string\n  ): Promise<string | undefined> {\n    const { source, options } = this;\n    if (source != null) {\n      const result = await FileSystem.fetch(source, {\n        path: tmpPath,\n        ...options,\n      });\n      // If the image download failed, we don't cache anything\n      if (result && result.status !== 200) {\n        this.downloadPromise = undefined;\n        return undefined;\n      }\n      await FileSystem.mv(tmpPath, path);\n      this.pathResolved = true;\n      return path;\n    }\n    return source;\n  }\n}\n\nexport default class CacheManager {\n  static defaultConfig: Config = defaultConfiguration;\n  static config: Config;\n\n  get config() {\n    return CacheManager.defaultConfig;\n  }\n\n  set config(newConfig) {\n    CacheManager.defaultConfig = newConfig;\n  }\n\n  static entries: { [uri: string]: CacheEntry } = {};\n\n  static get(\n    source: string,\n    options: DownloadOptions,\n    cacheKey: string\n  ): CacheEntry {\n    if (!CacheManager.entries[cacheKey]) {\n      CacheManager.entries[cacheKey] = new CacheEntry(\n        source,\n        options,\n        cacheKey\n      );\n      return CacheManager.entries[cacheKey];\n    }\n    return CacheManager.entries[cacheKey];\n  }\n\n  static async clearCache(): Promise<void> {\n    const files = await FileSystem.ls(CacheManager.config.baseDir);\n    for (const file of files) {\n      try {\n        await FileSystem.unlink(`${CacheManager.config.baseDir}${file}`);\n      } catch (e) {\n        console.log(`error while clearing images cache, error: ${e}`);\n      }\n    }\n  }\n\n  static async removeCacheEntry(entry: string): Promise<void> {\n    try {\n      const file = await getCacheEntry(entry);\n      const { path } = file;\n      await FileSystem.unlink(path);\n    } catch (e) {\n      throw new Error('error while clearing image from cache');\n    }\n  }\n\n  static async getCacheSize(): Promise<number> {\n    const result = await FileSystem.stat(CacheManager.config.baseDir);\n    if (!result) {\n      throw new Error(`${CacheManager.config.baseDir} not found`);\n    }\n    return result.size;\n  }\n}\n\nconst getCacheEntry = async (\n  cacheKey: string\n): Promise<{ exists: boolean; path: string; tmpPath: string }> => {\n  const filename = cacheKey.substring(\n    cacheKey.lastIndexOf('/'),\n    cacheKey.indexOf('?') === -1 ? cacheKey.length : cacheKey.indexOf('?')\n  );\n  const ext =\n    filename.indexOf('.') === -1\n      ? '.jpg'\n      : filename.substring(filename.lastIndexOf('.'));\n  const sha = SHA1(cacheKey);\n  const path = `${CacheManager.config.baseDir}${sha}${ext}`;\n  const tmpPath = `${CacheManager.config.baseDir}${sha}-${uniqueId()}${ext}`;\n  // TODO: maybe we don't have to do this every time\n  try {\n    await FileSystem.mkdir(CacheManager.config.baseDir);\n  } catch (e) {\n    // do nothing\n  }\n  const exists = await FileSystem.exists(path);\n  return { exists, path, tmpPath };\n};\n"]}