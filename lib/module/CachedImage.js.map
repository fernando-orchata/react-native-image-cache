{"version":3,"sources":["CachedImage.tsx"],"names":["React","useEffect","useMemo","Animated","Image","RNImage","Platform","StyleSheet","View","CacheManager","AnimatedImage","createAnimatedComponent","AnimatedView","defaultProps","onError","CachedImage","props","error","setError","useState","uri","setUri","undefined","source","propsSource","currentSource","setCurrentSource","animatedImage","useRef","Value","current","animatedThumbnailImage","animatedLoadingImage","load","catch","resetAnimations","cacheKey","options","path","get","getPath","nativeEvent","Error","e","setValue","onThumbnailLoad","timing","toValue","useNativeDriver","start","duration","thumbnailAnimationDuration","config","onImageError","onImageLoad","sourceAnimationDuration","blurRadius","loadingImageComponent","LoadingImageComponent","loadingImageStyle","style","loadingSource","resizeMode","thumbnailSource","rest","isImageReady","imageSource","OS","styles","container","opacity","imageStyle","create","backgroundColor","bottom","left","position","right","top","alignItems","alignSelf","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport {\n  Animated,\n  Image as RNImage,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport CacheManager from './CacheManager';\nimport { ImageProps, IProps } from './types';\n\nconst AnimatedImage = Animated.createAnimatedComponent(RNImage);\nconst AnimatedView = Animated.View;\n\nconst defaultProps = {\n  onError: () => {},\n};\n\nconst CachedImage = (props: IProps & typeof defaultProps) => {\n  const [error, setError] = React.useState<boolean>(false);\n  const [uri, setUri] = React.useState<string | undefined>(undefined);\n  const { source: propsSource } = props;\n  const [currentSource, setCurrentSource] = React.useState<string>(propsSource);\n\n  const animatedImage = React.useRef(new Animated.Value(0)).current;\n\n  const animatedThumbnailImage = React.useRef(new Animated.Value(0)).current;\n\n  const animatedLoadingImage = React.useRef(new Animated.Value(1)).current;\n\n  useEffect(() => {\n    if (propsSource !== uri) {\n      load(props).catch();\n    }\n    if (propsSource !== currentSource) {\n      setCurrentSource(propsSource);\n      setUri(undefined);\n      resetAnimations();\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [propsSource, uri]);\n\n  const load = async ({\n    cacheKey,\n    onError,\n    options = {},\n    source,\n  }: ImageProps): Promise<void> => {\n    if (source) {\n      try {\n        const path = await CacheManager.get(\n          source,\n          options,\n          cacheKey || source\n        ).getPath();\n        if (path) {\n          setUri(path);\n          setError(false);\n        } else {\n          setError(true);\n          onError({\n            nativeEvent: { error: new Error('Could not load image') },\n          });\n        }\n      } catch (e) {\n        setError(true);\n        onError({ nativeEvent: { error: e } });\n      }\n    }\n  };\n\n  const resetAnimations = () => {\n    animatedLoadingImage.setValue(1);\n    animatedThumbnailImage.setValue(0);\n    animatedImage.setValue(0);\n  };\n\n  const onThumbnailLoad = () => {\n    Animated.timing(animatedLoadingImage, {\n      toValue: 0,\n      useNativeDriver: true,\n    }).start(() => {\n      Animated.timing(animatedThumbnailImage, {\n        toValue: 1,\n        duration:\n          props.thumbnailAnimationDuration ||\n          CacheManager.config.thumbnailAnimationDuration,\n        useNativeDriver: true,\n      }).start();\n    });\n  };\n\n  const onImageError = (): void => setError(true);\n\n  const onImageLoad = (): void => {\n    Animated.timing(animatedImage, {\n      toValue: 1,\n      duration:\n        props.sourceAnimationDuration ||\n        CacheManager.config.sourceAnimationDuration,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const {\n    blurRadius,\n    loadingImageComponent: LoadingImageComponent,\n    loadingImageStyle = props.style,\n    loadingSource,\n    resizeMode,\n    style,\n    thumbnailSource,\n    ...rest\n  } = props;\n\n  const isImageReady = useMemo(() => (uri ? true : false), [uri, propsSource]);\n  const imageSource = useMemo(() => {\n    return error || !uri\n      ? loadingSource\n      : {\n          uri: Platform.OS === 'android' ? `file://${uri}` : uri,\n        };\n  }, [uri, error]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {!isImageReady &&\n        (LoadingImageComponent ? (\n          <AnimatedView\n            style={[\n              styles.loadingImageStyle,\n              { opacity: animatedLoadingImage },\n            ]}\n          >\n            <LoadingImageComponent />\n          </AnimatedView>\n        ) : (\n          <View style={[styles.loadingImageStyle]}>\n            <AnimatedImage\n              resizeMode={resizeMode || 'contain'}\n              style={[{ opacity: animatedLoadingImage }, loadingImageStyle]}\n              // @ts-ignore\n              source={loadingSource}\n            />\n          </View>\n        ))}\n      {thumbnailSource && (\n        <AnimatedImage\n          blurRadius={blurRadius || CacheManager.config.blurRadius}\n          onLoad={onThumbnailLoad}\n          resizeMode={resizeMode || 'contain'}\n          source={{ uri: thumbnailSource }}\n          style={[{ opacity: animatedThumbnailImage }]}\n        />\n      )}\n      {imageSource && (\n        <AnimatedImage\n          {...rest}\n          onError={onImageError}\n          onLoad={onImageLoad}\n          resizeMode={resizeMode || 'contain'}\n          // @ts-ignore\n          source={imageSource}\n          // @ts-ignore\n          style={[styles.imageStyle, { opacity: animatedImage }]}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  imageStyle: {\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  loadingImageStyle: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n});\n\nCachedImage.defaultProps = defaultProps;\n\nexport default CachedImage;\n"]}